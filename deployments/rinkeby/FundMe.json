{
    "address": "0xD62a65ce8953C373eDFd30708138b686Dd39D239",
    "abi": [
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "priceFeedAddress",
                    "type": "address"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "constructor"
        },
        {
            "inputs": [],
            "name": "FundMe__NotOwner",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "MINIMUM_USD",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "cheaperWithdraw",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "fund",
            "outputs": [],
            "stateMutability": "payable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "funder",
                    "type": "address"
                }
            ],
            "name": "getAddresstToAmountFunded",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "index",
                    "type": "uint256"
                }
            ],
            "name": "getFunder",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getOwner",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getPriceFeed",
            "outputs": [
                {
                    "internalType": "contract AggregatorV3Interface",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "withdraw",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
        }
    ],
    "transactionHash": "0x9b6c576d35daa77a01b7f6e43208b60b4a30b25a20160bf6c286afbd47ff9bdb",
    "receipt": {
        "to": null,
        "from": "0x4C09E9979140F9FB0979361Efa60205a91ce73cc",
        "contractAddress": "0xD62a65ce8953C373eDFd30708138b686Dd39D239",
        "transactionIndex": 14,
        "gasUsed": "1006107",
        "logsBloom": "0x
        "blockHash": "0xd812b7c1029ad86be28c0e158381e73f9cbebd59b51bac2a2863511212e5f9fe",
        "transactionHash": "0x9b6c576d35daa77a01b7f6e43208b60b4a30b25a20160bf6c286afbd47ff9bdb",
        "logs": [],
        "blockNumber": 10980388,
        "cumulativeGasUsed": "1904090",
        "status": 1,
        "byzantium": true
    },
    "args": ["0x8a753747a1fa494ec906ce90e9f37563a8af630e"],
    "numDeployments": 2,
    "solcInputHash": "9496a87a2db6585e9abc6cd5464bc385",
    "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"}],\"name\":\"getAddresstToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"HoangLC\",\"details\":\"This implements price feeds as the library\",\"kind\":\"dev\",\"methods\":{\"fund()\":{\"details\":\"This implements price feeds as the library\"}},\"title\":\"A contract for crowd funding\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"fund()\":{\"notice\":\"This function funds this contract\"}},\"notice\":\"This contract is to demo a sample funding contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"//SPDX-Lincense-Identifier: MIT\\n//pragma\\npragma solidity ^0.8.15;\\n//Imports\\nimport \\\"./PriceConverter.sol\\\";\\n//Error Codes\\nerror FundMe__NotOwner();\\n\\n//Interfaces, Libraries, and Contracts\\n\\n/// @title A contract for crowd funding\\n/// @author HoangLC\\n/// @notice This contract is to demo a sample funding contract\\n/// @dev This implements price feeds as the library\\n\\ncontract FundMe {\\n    //Type declarations\\n    using PriceConverter for uint256;\\n    //State variables\\n    uint256 public constant MINIMUM_USD = 50 * 1e18;\\n    address private immutable i_owner;\\n    address[] private funders;\\n    mapping(address => uint256) private addressToAmountFunded;\\n    AggregatorV3Interface private priceFeed;\\n    //Events, Modifiers\\n    modifier onlyOwner() {\\n        // require(msg.sender == i_owner, \\\"Only owner can call this function\\\");\\n        if (msg.sender != i_owner) {\\n            revert FundMe__NotOwner();\\n        }\\n        _;\\n    }\\n\\n    constructor(address priceFeedAddress) {\\n        i_owner = msg.sender;\\n        priceFeed = AggregatorV3Interface(priceFeedAddress);\\n    }\\n\\n    //What happen if a person send ETH to the contract but not call the fund function\\n    // receive(), fallback()\\n    // receive() external payable {\\n    //     fund();\\n    // }\\n\\n    // fallback() external payable {\\n    //     fund();\\n    // }\\n\\n    /// @notice This function funds this contract\\n    /// @dev This implements price feeds as the library\\n    function fund() public payable {\\n        require(\\n            msg.value.getConversionRate(priceFeed) >= MINIMUM_USD,\\n            \\\"The fund must larger or equal to 50 USD\\\"\\n        );\\n        funders.push(msg.sender);\\n        addressToAmountFunded[msg.sender] = msg.value;\\n    }\\n\\n    function withdraw() public onlyOwner returns (bool) {\\n        for (uint256 i = 0; i < funders.length; i++) {\\n            address funder = funders[i];\\n            addressToAmountFunded[funder] = 0;\\n        }\\n        // reset the array\\n        funders = new address[](0);\\n        //withdraw the funds\\n        (bool success, ) = payable(i_owner).call{value: address(this).balance}(\\n            \\\"\\\"\\n        );\\n        return success;\\n    }\\n\\n    function cheaperWithdraw() public onlyOwner returns (bool) {\\n        address[] memory funders_ = funders;\\n        for (uint256 funderIndex; funderIndex < funders_.length; ) {\\n            address funder = funders_[funderIndex];\\n            addressToAmountFunded[funder] = 0;\\n            unchecked {\\n                funderIndex++;\\n            }\\n        }\\n        funders = new address[](0);\\n        (bool success, ) = payable(i_owner).call{value: address(this).balance}(\\n            \\\"\\\"\\n        );\\n        return success;\\n    }\\n\\n    function getOwner() external view returns (address) {\\n        return i_owner;\\n    }\\n\\n    function getFunder(uint256 index) external view returns (address) {\\n        return funders[index];\\n    }\\n\\n    function getAddresstToAmountFunded(address funder)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return addressToAmountFunded[funder];\\n    }\\n\\n    function getPriceFeed() external view returns (AggregatorV3Interface) {\\n        return priceFeed;\\n    }\\n}\\n\",\"keccak256\":\"0xc98764c06369c4628053c7836e27485b2226159751d7d4ab95e43e4b493980d6\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-Lincense-Identifier: MIT\\npragma solidity ^0.8.15;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\nlibrary PriceConverter {\\n    function getPrice(AggregatorV3Interface priceFeed)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        // ABI\\n        // Address: 0x8A753747A1Fa494EC906cE90E9f37563A8AF630e\\n        (, int256 price, , , ) = priceFeed.latestRoundData();\\n        return uint256(price * 1e10);\\n    }\\n\\n    function getConversionRate(\\n        uint256 ethAmount,\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        uint256 ethPrice = getPrice(priceFeed);\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18;\\n        return ethAmountInUsd;\\n    }\\n}\\n\",\"keccak256\":\"0x5b1c27cb6eb2ef938cfb7dfd7d9adce9d922870ce3090a5b73c302c24b58b123\"}},\"version\":1}",
    "bytecode": "0x60a06040523480156200001157600080fd5b506040516200125c3803806200125c83398181016040528101906200003791906200011d565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506200014f565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000e582620000b8565b9050919050565b620000f781620000d8565b81146200010357600080fd5b50565b6000815190506200011781620000ec565b92915050565b600060208284031215620001365762000135620000b3565b5b6000620001468482850162000106565b91505092915050565b6080516110d56200018760003960008181610228015281816103bb0152818161045b015281816105d601526107c601526110d56000f3fe60806040526004361061007b5760003560e01c80639e87a5cd1161004e5780639e87a5cd1461013e578063b60d428814610169578063be2693f014610173578063d7b4750c1461019e5761007b565b80630c0e6a39146100805780633ccfd60b146100bd5780636b69a592146100e8578063893d20e814610113575b600080fd5b34801561008c57600080fd5b506100a760048036038101906100a29190610a74565b6101db565b6040516100b49190610aba565b60405180910390f35b3480156100c957600080fd5b506100d2610224565b6040516100df9190610af0565b60405180910390f35b3480156100f457600080fd5b506100fd61044a565b60405161010a9190610aba565b60405180910390f35b34801561011f57600080fd5b50610128610457565b6040516101359190610b1a565b60405180910390f35b34801561014a57600080fd5b5061015361047f565b6040516101609190610b94565b60405180910390f35b6101716104a9565b005b34801561017f57600080fd5b506101886105d2565b6040516101959190610af0565b60405180910390f35b3480156101aa57600080fd5b506101c560048036038101906101c09190610bdb565b610856565b6040516101d29190610b1a565b60405180910390f35b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102ab576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6000805490508110156103565760008082815481106102d0576102cf610c08565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061034e90610c66565b9150506102ae565b50600067ffffffffffffffff81111561037257610371610cae565b5b6040519080825280602002602001820160405280156103a05781602001602082028036833780820191505090505b50600090805190602001906103b692919061096a565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16476040516103fd90610d0e565b60006040518083038185875af1925050503d806000811461043a576040519150601f19603f3d011682016040523d82523d6000602084013e61043f565b606091505b505090508091505090565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6802b5e3af16b18800006104e8600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461089d90919063ffffffff16565b1015610529576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161052090610da6565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610659576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000808054806020026020016040519081016040528092919081815260200182805480156106dc57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610692575b5050505050905060005b815181101561076157600082828151811061070457610703610c08565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508180600101925050506106e6565b50600067ffffffffffffffff81111561077d5761077c610cae565b5b6040519080825280602002602001820160405280156107ab5781602001602082028036833780820191505090505b50600090805190602001906107c192919061096a565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161080890610d0e565b60006040518083038185875af1925050503d8060008114610845576040519150601f19603f3d011682016040523d82523d6000602084013e61084a565b606091505b50509050809250505090565b600080828154811061086b5761086a610c08565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000806108a9836108d9565b90506000670de0b6b3a764000085836108c29190610dc6565b6108cc9190610e4f565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610927573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061094b9190610f0d565b5050509150506402540be400816109629190610f88565b915050919050565b8280548282559060005260206000209081019282156109e3579160200282015b828111156109e25782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509160200191906001019061098a565b5b5090506109f091906109f4565b5090565b5b80821115610a0d5760008160009055506001016109f5565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a4182610a16565b9050919050565b610a5181610a36565b8114610a5c57600080fd5b50565b600081359050610a6e81610a48565b92915050565b600060208284031215610a8a57610a89610a11565b5b6000610a9884828501610a5f565b91505092915050565b6000819050919050565b610ab481610aa1565b82525050565b6000602082019050610acf6000830184610aab565b92915050565b60008115159050919050565b610aea81610ad5565b82525050565b6000602082019050610b056000830184610ae1565b92915050565b610b1481610a36565b82525050565b6000602082019050610b2f6000830184610b0b565b92915050565b6000819050919050565b6000610b5a610b55610b5084610a16565b610b35565b610a16565b9050919050565b6000610b6c82610b3f565b9050919050565b6000610b7e82610b61565b9050919050565b610b8e81610b73565b82525050565b6000602082019050610ba96000830184610b85565b92915050565b610bb881610aa1565b8114610bc357600080fd5b50565b600081359050610bd581610baf565b92915050565b600060208284031215610bf157610bf0610a11565b5b6000610bff84828501610bc6565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610c7182610aa1565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610ca357610ca2610c37565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610cf8600083610cdd565b9150610d0382610ce8565b600082019050919050565b6000610d1982610ceb565b9150819050919050565b600082825260208201905092915050565b7f5468652066756e64206d757374206c6172676572206f7220657175616c20746f60008201527f2035302055534400000000000000000000000000000000000000000000000000602082015250565b6000610d90602783610d23565b9150610d9b82610d34565b604082019050919050565b60006020820190508181036000830152610dbf81610d83565b9050919050565b6000610dd182610aa1565b9150610ddc83610aa1565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610e1557610e14610c37565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610e5a82610aa1565b9150610e6583610aa1565b925082610e7557610e74610e20565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610e9f81610e80565b8114610eaa57600080fd5b50565b600081519050610ebc81610e96565b92915050565b6000819050919050565b610ed581610ec2565b8114610ee057600080fd5b50565b600081519050610ef281610ecc565b92915050565b600081519050610f0781610baf565b92915050565b600080600080600060a08688031215610f2957610f28610a11565b5b6000610f3788828901610ead565b9550506020610f4888828901610ee3565b9450506040610f5988828901610ef8565b9350506060610f6a88828901610ef8565b9250506080610f7b88828901610ead565b9150509295509295909350565b6000610f9382610ec2565b9150610f9e83610ec2565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610fdd57610fdc610c37565b5b817f8000000000000000000000000000000000000000000000000000000000000000058312600084126000841316161561101a57611019610c37565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561105757611056610c37565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561109457611093610c37565b5b82820290509291505056fea26469706673582212203595e5f1bff85407bddafc04463de6ea54d3e90904cfe3deccfa9adf5afdf78764736f6c634300080f0033",
    "deployedBytecode": "0x60806040526004361061007b5760003560e01c80639e87a5cd1161004e5780639e87a5cd1461013e578063b60d428814610169578063be2693f014610173578063d7b4750c1461019e5761007b565b80630c0e6a39146100805780633ccfd60b146100bd5780636b69a592146100e8578063893d20e814610113575b600080fd5b34801561008c57600080fd5b506100a760048036038101906100a29190610a74565b6101db565b6040516100b49190610aba565b60405180910390f35b3480156100c957600080fd5b506100d2610224565b6040516100df9190610af0565b60405180910390f35b3480156100f457600080fd5b506100fd61044a565b60405161010a9190610aba565b60405180910390f35b34801561011f57600080fd5b50610128610457565b6040516101359190610b1a565b60405180910390f35b34801561014a57600080fd5b5061015361047f565b6040516101609190610b94565b60405180910390f35b6101716104a9565b005b34801561017f57600080fd5b506101886105d2565b6040516101959190610af0565b60405180910390f35b3480156101aa57600080fd5b506101c560048036038101906101c09190610bdb565b610856565b6040516101d29190610b1a565b60405180910390f35b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102ab576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6000805490508110156103565760008082815481106102d0576102cf610c08565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061034e90610c66565b9150506102ae565b50600067ffffffffffffffff81111561037257610371610cae565b5b6040519080825280602002602001820160405280156103a05781602001602082028036833780820191505090505b50600090805190602001906103b692919061096a565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16476040516103fd90610d0e565b60006040518083038185875af1925050503d806000811461043a576040519150601f19603f3d011682016040523d82523d6000602084013e61043f565b606091505b505090508091505090565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6802b5e3af16b18800006104e8600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461089d90919063ffffffff16565b1015610529576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161052090610da6565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610659576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000808054806020026020016040519081016040528092919081815260200182805480156106dc57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610692575b5050505050905060005b815181101561076157600082828151811061070457610703610c08565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508180600101925050506106e6565b50600067ffffffffffffffff81111561077d5761077c610cae565b5b6040519080825280602002602001820160405280156107ab5781602001602082028036833780820191505090505b50600090805190602001906107c192919061096a565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161080890610d0e565b60006040518083038185875af1925050503d8060008114610845576040519150601f19603f3d011682016040523d82523d6000602084013e61084a565b606091505b50509050809250505090565b600080828154811061086b5761086a610c08565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000806108a9836108d9565b90506000670de0b6b3a764000085836108c29190610dc6565b6108cc9190610e4f565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610927573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061094b9190610f0d565b5050509150506402540be400816109629190610f88565b915050919050565b8280548282559060005260206000209081019282156109e3579160200282015b828111156109e25782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509160200191906001019061098a565b5b5090506109f091906109f4565b5090565b5b80821115610a0d5760008160009055506001016109f5565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a4182610a16565b9050919050565b610a5181610a36565b8114610a5c57600080fd5b50565b600081359050610a6e81610a48565b92915050565b600060208284031215610a8a57610a89610a11565b5b6000610a9884828501610a5f565b91505092915050565b6000819050919050565b610ab481610aa1565b82525050565b6000602082019050610acf6000830184610aab565b92915050565b60008115159050919050565b610aea81610ad5565b82525050565b6000602082019050610b056000830184610ae1565b92915050565b610b1481610a36565b82525050565b6000602082019050610b2f6000830184610b0b565b92915050565b6000819050919050565b6000610b5a610b55610b5084610a16565b610b35565b610a16565b9050919050565b6000610b6c82610b3f565b9050919050565b6000610b7e82610b61565b9050919050565b610b8e81610b73565b82525050565b6000602082019050610ba96000830184610b85565b92915050565b610bb881610aa1565b8114610bc357600080fd5b50565b600081359050610bd581610baf565b92915050565b600060208284031215610bf157610bf0610a11565b5b6000610bff84828501610bc6565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610c7182610aa1565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610ca357610ca2610c37565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610cf8600083610cdd565b9150610d0382610ce8565b600082019050919050565b6000610d1982610ceb565b9150819050919050565b600082825260208201905092915050565b7f5468652066756e64206d757374206c6172676572206f7220657175616c20746f60008201527f2035302055534400000000000000000000000000000000000000000000000000602082015250565b6000610d90602783610d23565b9150610d9b82610d34565b604082019050919050565b60006020820190508181036000830152610dbf81610d83565b9050919050565b6000610dd182610aa1565b9150610ddc83610aa1565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610e1557610e14610c37565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610e5a82610aa1565b9150610e6583610aa1565b925082610e7557610e74610e20565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610e9f81610e80565b8114610eaa57600080fd5b50565b600081519050610ebc81610e96565b92915050565b6000819050919050565b610ed581610ec2565b8114610ee057600080fd5b50565b600081519050610ef281610ecc565b92915050565b600081519050610f0781610baf565b92915050565b600080600080600060a08688031215610f2957610f28610a11565b5b6000610f3788828901610ead565b9550506020610f4888828901610ee3565b9450506040610f5988828901610ef8565b9350506060610f6a88828901610ef8565b9250506080610f7b88828901610ead565b9150509295509295909350565b6000610f9382610ec2565b9150610f9e83610ec2565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610fdd57610fdc610c37565b5b817f8000000000000000000000000000000000000000000000000000000000000000058312600084126000841316161561101a57611019610c37565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561105757611056610c37565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561109457611093610c37565b5b82820290509291505056fea26469706673582212203595e5f1bff85407bddafc04463de6ea54d3e90904cfe3deccfa9adf5afdf78764736f6c634300080f0033",
    "devdoc": {
        "author": "HoangLC",
        "details": "This implements price feeds as the library",
        "kind": "dev",
        "methods": {
            "fund()": {
                "details": "This implements price feeds as the library"
            }
        },
        "title": "A contract for crowd funding",
        "version": 1
    },
    "userdoc": {
        "kind": "user",
        "methods": {
            "fund()": {
                "notice": "This function funds this contract"
            }
        },
        "notice": "This contract is to demo a sample funding contract",
        "version": 1
    },
    "storageLayout": {
        "storage": [
            {
                "astId": 64,
                "contract": "contracts/FundMe.sol:FundMe",
                "label": "funders",
                "offset": 0,
                "slot": "0",
                "type": "t_array(t_address)dyn_storage"
            },
            {
                "astId": 68,
                "contract": "contracts/FundMe.sol:FundMe",
                "label": "addressToAmountFunded",
                "offset": 0,
                "slot": "1",
                "type": "t_mapping(t_address,t_uint256)"
            },
            {
                "astId": 71,
                "contract": "contracts/FundMe.sol:FundMe",
                "label": "priceFeed",
                "offset": 0,
                "slot": "2",
                "type": "t_contract(AggregatorV3Interface)45"
            }
        ],
        "types": {
            "t_address": {
                "encoding": "inplace",
                "label": "address",
                "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
                "base": "t_address",
                "encoding": "dynamic_array",
                "label": "address[]",
                "numberOfBytes": "32"
            },
            "t_contract(AggregatorV3Interface)45": {
                "encoding": "inplace",
                "label": "contract AggregatorV3Interface",
                "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => uint256)",
                "numberOfBytes": "32",
                "value": "t_uint256"
            },
            "t_uint256": {
                "encoding": "inplace",
                "label": "uint256",
                "numberOfBytes": "32"
            }
        }
    }
}
